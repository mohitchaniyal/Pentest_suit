from tkinter import *
from scapy import sendrecv

from scapy.layers.inet import IP,Ether,TCP
from tkinter import ttk
class packet_crafter_class(Toplevel):
    def __init__(self):
        Toplevel.__init__(self)
        self.geometry('790x527')
        self.title('Packet Crafter')
        self.iconbitmap('logo/Cap-america-shield.ico')

        self.L2 = Ether()
        self.L3 = IP()
        self.L4 = TCP()

        self.Button_image=PhotoImage(file='logo/iAddSimplePacket.png')
        self.bg_frame=Frame(self,bg='#494949',height=800,width=900)
        self.bg_frame.pack()


        # Layer 2 (Data Link Layer) starts Here

        self.L2_frame = LabelFrame(self.bg_frame, text=' Craft Packet At Layer 2 Here ', bg='#494949',bd=2,fg='white',relief=RIDGE)
        self.L2_frame.place(x=3, y=5)

        self.dst_mac_lable = Label(self.L2_frame, text=' Destination MAC                 ', bg='#494949',fg='white').grid(row=0, column=0, sticky=W)
        self.dst_mac = Entry(self.L2_frame, width=20)
        self.dst_mac.insert(0,self.L2.dst)
        self.dst_mac.grid(row=0, column=1, padx=5, pady=5)

        self.src_mac_lable = Label(self.L2_frame, text=' Source MAC', bg='#494949',fg='white').grid(row=1, column=0, sticky=W)
        self.src_mac = Entry(self.L2_frame, width=20)
        self.src_mac.insert(0,self.L2.src)
        self.src_mac.grid(row=1, column=1, padx=5, pady=5)

        self.layer2_type_label = Label(self.L2_frame, text=' Type', bg='#494949',fg='white').grid(row=2, column=0, sticky=W)
        self.layer2_type = Entry(self.L2_frame, width=20)
        self.layer2_type.insert(0,self.L2.type)
        self.layer2_type.grid(row=2, column=1, padx=5, pady=5)

        self.l2_reset_button=Button(self.L2_frame,text='Reset', bg='#494949',fg='white',command=self.reset_l2)
        self.l2_reset_button.grid(row=3,column=1,sticky=EW,padx=5,pady=5)

        # Layer 3 (Network Layer) Starts Here

        self.L3_frame=LabelFrame(self.bg_frame,text=' Craft Packet At Layer 3 Here ', bg='#494949',bd=2,fg='white',relief=RIDGE)
        self.L3_frame.place(x=300,y=5)

        self.version_label=Label(self.L3_frame,text=' Version', bg='#494949',fg='white')
        self.version_label.grid(row=0,column=0, sticky=W)
        self.version=Entry(self.L3_frame,width=20)
        self.version.insert(0,self.L3.version)
        self.version.grid(row=0,column=1,padx=5,pady=5)

        self.ihl_label=Label(self.L3_frame,text=' IHL',bg='#494949',fg='white').grid(row=1,column=0, sticky=W)
        self.ihl=Entry(self.L3_frame,width=20)
        try :
            self.ihl.insert(0,self.L3.ihl)
        except:
            self.ihl.insert(0,24)
            pass
        self.ihl.grid(row=1,column=1,padx=5,pady=5)

        self.tos_label=Label(self.L3_frame,text=' TOS',bg='#494949',fg='white').grid(row=2,column=0, sticky=W)
        self.tos=Entry(self.L3_frame,width=20)
        self.tos.insert(0,self.L3.tos)
        self.tos.grid(row=2,column=1,padx=5,pady=5)

        self.length_label=Label(self.L3_frame,text=' Header length',bg='#494949',fg='white').grid(row=3,column=0, sticky=W)
        self.length=Entry(self.L3_frame,width=20)
        try:
            self.length.insert(0,self.L3.len)
        except:
            self.length.insert(0,20)
            pass
        self.length.grid(row=3,column=1,padx=5,pady=5)

        self.id_label=Label(self.L3_frame,text=' ID',bg='#494949',fg='white').grid(row=4,column=0, sticky=W)
        self.id=Entry(self.L3_frame,width=20)
        self.id.insert(0,self.L3.id)
        self.id.grid(row=4,column=1,padx=5,pady=5)

        self.l3_flag_label=Label(self.L3_frame,text=' Flag',bg='#494949',fg='white').grid(row=5,column=0, sticky=W)
        self.l3_flag=Entry(self.L3_frame,width=20)
        self.l3_flag.insert(0,self.L3.flags)
        self.l3_flag.grid(row=5,column=1,padx=5,pady=5, sticky=W)

        self.fragment_label=Label(self.L3_frame,text=' Fragment',bg='#494949',fg='white').grid(row=6,column=0, sticky=W)
        self.fragment=Entry(self.L3_frame,width=20)
        self.fragment.insert(0,self.L3.frag)
        self.fragment.grid(row=6,column=1,padx=5,pady=5, sticky=W)

        self.ttl_label=Label(self.L3_frame,text=' Time To Live ',bg='#494949',fg='white').grid(row=7,column=0, sticky=W)
        self.ttl=Entry(self.L3_frame,width=20)
        self.ttl.insert(0,self.L3.ttl)
        self.ttl.grid(row=7,column=1,padx=5,pady=5)

        self.protocol_label=Label(self.L3_frame,text=' Protocol ',bg='#494949',fg='white').grid(row=8,column=0, sticky=W)
        self.protocol=Entry(self.L3_frame,width=20)
        self.protocol.insert(0,self.L3.proto)
        self.protocol.grid(row=8,column=1,padx=5,pady=5)

        self.l3_checksum_label=Label(self.L3_frame,text=' Checksum ',bg='#494949',fg='white').grid(row=9,column=0, sticky=W)
        self.l3_checksum=Entry(self.L3_frame,width=20)
        try:
            self.l3_checksum.insert(0,self.L3.chksum)
        except:
            self.l3_checksum.insert(0,12345)
            pass
        self.l3_checksum.grid(row=9,column=1,padx=5,pady=5)

        self.src_ip_label=Label(self.L3_frame,text=' Source IP address',bg='#494949',fg='white').grid(row=10,column=0, sticky=W)
        self.src_ip=Entry(self.L3_frame,width=20)
        self.src_ip.insert(0,self.L3.src)
        self.src_ip.grid(row=10,column=1,padx=5,pady=5)

        self.dst_ip_label=Label(self.L3_frame,text=' Destination IP address',bg='#494949',fg='white').grid(row=11,column=0, sticky=W)
        self.dst_ip=Entry(self.L3_frame,width=20)
        self.dst_ip.insert(0,self.L3.dst)
        self.dst_ip.grid(row=11,column=1,padx=5,pady=5)

        self.l3_reset_button = Button(self.L3_frame, text='Reset', bg='#494949',fg='white',command=self.reset_l3)
        self.l3_reset_button.grid(row=12, column=1, sticky=EW, padx=5, pady=5)


        # Layer 4 (Transport Layer) Starts Here

        self.L4_frame=LabelFrame(self.bg_frame,text='Craft Packet At Layer 4 [TCP] Here',bg='#494949',bd=2,fg='white',relief=RIDGE)
        self.L4_frame.place(x=3,y=150)

        self.sport_label=Label(self.L4_frame,text='Source port',bg='#494949',fg='white').grid(row=0,column=0, sticky=W)
        self.sport=Entry(self.L4_frame,width=20)
        self.sport.insert(0,self.L4.sport)
        self.sport.grid(row=0,column=1,padx=5,pady=5)

        self.dport_label=Label(self.L4_frame,text='Destination port   ',bg='#494949',fg='white').grid(row=1,column=0, sticky=W)
        self.dport=Entry(self.L4_frame,width=20)
        self.dport.insert(0,self.L4.dport)
        self.dport.grid(row=1,column=1,padx=5,pady=5)

        self.seq_label=Label(self.L4_frame,text='Sequence number',bg='#494949',fg='white').grid(row=2,column=0, sticky=W)
        self.seq=Entry(self.L4_frame,width=20)
        self.seq.insert(0,self.L4.seq)
        self.seq.grid(row=2,column=1,padx=5,pady=5)

        self.ack_label=Label(self.L4_frame,text='Acknowledgement number',bg='#494949',fg='white').grid(row=3,column=0, sticky=W)
        self.ack=Entry(self.L4_frame,width=20)
        self.ack.insert(0,self.L4.ack)
        self.ack.grid(row=3,column=1,padx=5,pady=5)

        self.dataofs_label=Label(self.L4_frame,text='Data of S',bg='#494949',fg='white').grid(row=4,column=0, sticky=W)
        self.dataofs=Entry(self.L4_frame,width=20)
        try:
            self.dataofs.insert(0,self.L4.dataofs)
        except:
            pass
        self.dataofs.grid(row=4,column=1,padx=5,pady=5)

        self.reserved_label=Label(self.L4_frame,text='Reserved',bg='#494949',fg='white').grid(row=5,column=0, sticky=W)
        self.reserved=Entry(self.L4_frame,width=20)
        self.reserved.insert(0,self.L4.reserved)
        self.reserved.grid(row=5,column=1,padx=5,pady=5)

        self.l4_flag_label=Label(self.L4_frame,text='Flag',bg='#494949',fg='white').grid(row=6,column=0, sticky=W)
        self.l4_flag=Entry(self.L4_frame,width=20)
        self.l4_flag.insert(0,self.L4.flags)
        self.l4_flag.grid(row=6,column=1,padx=5,pady=5)

        self.window_label=Label(self.L4_frame,text='Window size',bg='#494949',fg='white').grid(row=7,column=0, sticky=W)
        self.window=Entry(self.L4_frame,width=20)
        self.window.insert(0,self.L4.window)
        self.window.grid(row=7,column=1,padx=5,pady=5)

        self.l4_checksum_label=Label(self.L4_frame,text='Checksum',bg='#494949',fg='white').grid(row=8,column=0, sticky=W)
        self.l4_checksum=Entry(self.L4_frame,width=20)
        try:
            self.l4_checksum.insert(0,self.L4.chksum)
        except:
            pass
        self.l4_checksum.grid(row=8,column=1,padx=5,pady=5)

        self.urgptr_label=Label(self.L4_frame,text='Urgptr',bg='#494949',fg='white').grid(row=9,column=0, sticky=W)
        self.urgptr=Entry(self.L4_frame,width=20)
        self.urgptr.insert(0,self.L4.urgptr)
        self.urgptr.grid(row=9,column=1,padx=5,pady=5)

        self.options_label=Label(self.L4_frame,text='Options',bg='#494949',fg='white').grid(row=10,column=0, sticky=W)
        self.options=Entry(self.L4_frame,width=20)
        self.options.insert(0,self.L4.options)
        self.options.grid(row=10,column=1,padx=5,pady=5)

        self.l4_reset_button=Button(self.L4_frame,text='Reset',bg='#494949',fg='white').grid(row=11,column=1,sticky=EW,padx=5,pady=5)

        self.craft_button = Button(self.bg_frame, text='\tCraft And Send\t            ', font='Arial 10 bold', bg='#494949', fg='white', height = 60, image=self.Button_image, compound=LEFT, command=self.craft_packet).place(x=300, y=420)
        self.hint=Label(self.bg_frame,text='             Use Wireshark To Analyze Packets',fg='white',bg='#494949').place(x=300,y=497)

        self.payload_frame=LabelFrame(self.bg_frame,text='Write Payload',fg='white',bg='#494949',relief=RIDGE,bd=2)
        self.payload_frame.place(x=570,y=5)
        self.payload_window=Text(self.payload_frame,height=30,width=25,wrap=WORD)
        self.payload_window.insert(1.0,'Hello World')
        self.payload_window.pack(padx=5,pady=8)

    def reset_l2(self):
        self.dst_mac.delete(0,END)
        self.src_mac.delete(0,END)
        self.layer2_type.delete(0,END)
        self.dst_mac.insert(0, self.L2.dst)
        self.src_mac.insert(0, self.L2.src)
        self.layer2_type.insert(0, self.L2.type)

    def reset_l3(self):
        self.version.delete(0,END)
        self.layer2_type.delete(0, END)
        self.ihl.delete(0, END)
        self.tos.delete(0, END)
        self.length.delete(0, END)
        self.id.delete(0, END)
        self.fragment.delete(0, END)
        self.ttl.delete(0, END)
        self.protocol.delete(0, END)
        self.l3_checksum.delete(0, END)
        self.src_ip.delete(0, END)
        self.dst_ip.delete(0, END)
        self.l3_flag.delete(0,END)
        
        self.version.insert(self.L3.version)
        self.layer2_type.insert(0, self.L2.type)

        try:
            self.ihl.insert(0, self.L3.ihl)
        except:
            self.ihl.insert(0, 24)
            pass

        self.tos.insert(0, self.L3.tos)

        try:
            self.length.insert(0, self.L3.len)
        except:
            self.length.insert(0, 20)
            pass

        self.id.insert(0, self.L3.id)
        self.l3_flag.insert(0, self.L3.flags)
        self.fragment.insert(0, self.L3.frag)
        self.ttl.insert(0, self.L3.ttl)
        self.protocol.insert(0, self.L3.proto)
        try:
            self.l3_checksum.insert(0, self.L3.chksum)
        except:
            self.l3_checksum.insert(0, 12345)
            pass
        self.src_ip.insert(0, self.L3.src)
        self.dst_ip.insert(0, self.L3.dst)


    def craft_packet(self):
        #L2
        src_mac=self.src_mac.get()
        dst_mac=self.dst_mac.get()
        types=self.layer2_type.get()
        self.L2.src=src_mac
        self.L2.dst=dst_mac
        self.L2.type=int(types)


        #L3
        version=self.version.get()
        ihl=self.ihl.get()
        tos=self.tos.get()
        len=self.length.get()
        id=self.id.get()
        flags=self.l3_flag.get()
        frag=self.fragment.get()
        ttl=self.ttl.get()
        proto=self.protocol.get()
        l2_chksum=self.l3_checksum.get()
        src=self.src_ip.get()
        dst=self.dst_ip.get()
        options=self.options.get()
        self.L3.version=int(version)
        self.L3.ihl=int(ihl)
        self.L3.tos=int(tos)
        self.L3.len=int(len)
        self.L3.id=int(id)
        self.L3.flags=flags
        self.L3.frag=int(frag)
        self.L3.ttl=int(ttl)
        self.L3.proto=int(proto)
        self.L3.chksum=int(l2_chksum)
        self.L3.src=src
        self.L3.dst=dst

        # L4
        sport=self.sport.get()
        dport=self.dport.get()
        seq=self.seq.get()
        ack=self.ack.get()
        dataofs=self.dataofs.get()
        reserved=self.reserved.get()
        l4_flags=self.l4_flag.get()
        window=self.window.get()
        l4_chksum=self.l4_checksum.get()
        urgptr=self.urgptr.get()
        l4_options=self.options.get()
        self.L4.sport=int(sport)
        self.L4.dport=int(dport)
        self.L4.seq=int(seq)
        self.L4.ack=int(ack)
        self.L4.dataofs=dataofs
        self.L4.reserved=int(reserved)
        self.L4.flags=l4_flags
        self.L4.window=int(window)
        self.L4.chksum=l4_chksum
        self.L4.urgptr=int(urgptr)
        self.L4.options=l4_options

        #payload
        self.payload = self.payload_window.get(1.0, END)

        send=sendrecv.sendp(self.L2/self.L3/self.L3/self.payload)


