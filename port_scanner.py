from tkinter import *
import socket
import threading
import time
from tkinter import filedialog
from tkinter import messagebox

class port_scanner_class(Toplevel):
    def __init__(self):
        Toplevel.__init__(self)
        self.list = []
        global list
        list = self.list
        self.geometry('240x160')
        self.maxsize(240, 160)
        self.title('Port Scanner')
        self.iconbitmap('logo/Cap-america-shield.ico')
        self.frame = Frame(self, height=10, bg='#555555')
        self.frame.pack(fill=X)
        self.middle_frame = LabelFrame(self, text='  Port Scanner  ', font='Arial 10 bold', bg='#555555', fg='white',bd=10)
        self.middle_frame.pack()

        self.domain_lbl = Label(self.middle_frame,text=' Enter Domain Or IP', bg='#555555', fg='white')
        self.domain_lbl.grid(row=0, column=0, sticky=W)
        self.domain = Entry(self.middle_frame, width=15)
        self.domain.insert(0, '127.0.0.1')
        self.domain.grid(row=0, column=1, padx=10, pady=5)

        self.start_port_lbl = Label(self.middle_frame, text=' Enter Start Port', bg='#555555', fg='white')
        self.start_port_lbl.grid(row=1, column=0, sticky=W)
        self.start_port = Entry(self.middle_frame, width=15)
        self.start_port = self.start_port
        self.start_port.insert(0, 1)
        self.start_port.grid(row=1, column=1, padx=5, pady=5)

        self.end_port_lbl = Label(self.middle_frame, text=' Enter End Port', bg='#555555', fg='white')
        self.end_port_lbl.grid(row=2, column=0, sticky=W)
        self.end_port = Entry(self.middle_frame, width=15)
        self.end_port.insert(0, 1023)
        self.end_port.grid(row=2, column=1, padx=5, pady=5)

        self.scan_button=Button(self.middle_frame, text='Scan', bg='#494949', command=self.scan_warning, fg='white')
        self.scan_button.grid(row=3, column=1, sticky=EW, padx=5, pady=5)

    def scan(self):
        domain = self.domain.get()
        start_port = self.start_port.get()
        end_port = self.end_port.get()

        try:
            domainI=socket.gethostbyname(domain)
            self.list.append('Target {} IP {}\n\n'.format(domain,domainI))
        except socket.gaierror as error:
            error_mbox=messagebox.showerror('Error',error)
            self.destroy()


        def scan_loop(domain, port):

            self.s = socket.socket()
            self.result = self.s.connect_ex((domain, port))
            if self.result == 0:
                try:
                    port_name = socket.getservbyport(port)

                except OSError:
                    port_name = 'Unknown'
                self.list.append((' OPEN PORT :   {}     {} \n'.format(port, port_name)))
            else:
                pass
            self.s.close()

        for port in range(int(start_port), int(end_port)+1):
            t = threading.Thread(target=scan_loop, args=(domainI, port,))
            t.start()
        time.sleep(5)
        self.open_scan_result()

    def open_scan_result(self):
        scan_result_window = scan_result_class()
        self.destroy()

    def scan_warning(self):
        self.mbox=messagebox.askokcancel('Warning', 'Performing scan without permission is illegal we are not responsible for your activity',icon='warning')
        if self.mbox == True:
            self.scan()

class scan_result_class(Toplevel):
    def __init__(self):
        Toplevel.__init__(self)
        self.geometry('320x435')
        self.maxsize(320, 435)
        self.title('Scan Result')
        self.iconbitmap('logo/Cap-america-shield.ico')
        self.text_area = Text(self, width=40, height=25, bg='#494949',fg='white')
        self.text_area.pack()
        self.save_button_frame=Frame(self, height='50', bg='#494949')
        self.save_button_frame.pack(fill=X)
        self.save_button = Button(self.save_button_frame, height=1, text='     Save     ', bg='#494949', command=self.save_file,fg='white')
        self.save_button.pack(padx=2, pady=2)
        for i in list :
            self.text_area.insert(END, i)

    def save_file(self):
        file=filedialog.asksaveasfile(mode='w', defaultextension='.txt')
        if file == None:
            return
        file_data = self.text_area.get(1.0, 'end-1c')
        file.write(file_data)